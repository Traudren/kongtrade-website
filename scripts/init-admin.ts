
import { PrismaClient } from '@prisma/client'
import * as bcrypt from 'bcryptjs'

const prisma = new PrismaClient()

async function initializeAdmin() {
  try {
    console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∞...')
    
    const adminEmail = 'admin@kongtrade.com'
    const adminPassword = 'KongTrade2024!'
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –∞–¥–º–∏–Ω
    const existingAdmin = await prisma.user.findUnique({
      where: { email: adminEmail }
    })
    
    if (existingAdmin) {
      console.log('‚úÖ –ê–¥–º–∏–Ω —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!')
      console.log('Email:', adminEmail)
      console.log('ID:', existingAdmin.id)
      return existingAdmin
    }
    
    // –•–µ—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å
    const hashedPassword = await bcrypt.hash(adminPassword, 12)
    
    // –°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω–∞
    const admin = await prisma.user.create({
      data: {
        name: 'KongTrade Admin',
        email: adminEmail,
        password: hashedPassword,
        role: 'admin',
        referralCode: 'ADMIN-' + Date.now(),
        emailVerified: new Date() // –°—Ä–∞–∑—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º email
      }
    })
    
    console.log('‚úÖ –ê–¥–º–∏–Ω —É—Å–ø–µ—à–Ω–æ created!')
    console.log('üìß Email:', adminEmail)
    console.log('üîë Password:', adminPassword)
    console.log('üÜî Admin ID:', admin.id)
    console.log('')
    console.log('üîê Data –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å:')
    console.log(`   URL: http://localhost:3000/dashboard/admin`)
    console.log(`   Email: ${adminEmail}`)
    console.log(`   Password: ${adminPassword}`)
    
    return admin
    
  } catch (error) {
    console.error('‚ùå Error created–∏—è –∞–¥–º–∏–Ω–∞:', error)
    throw error
  } finally {
    await prisma.$disconnect()
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  initializeAdmin()
    .then(() => {
      console.log('‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞')
      process.exit(0)
    })
    .catch((error) => {
      console.error('‚ùå Error –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error)
      process.exit(1)
    })
}

export { initializeAdmin }
